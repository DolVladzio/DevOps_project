pipeline {
    agent any
    // tools {
    //     gradle "Gradle 7.5.1"
    // }

    environment {
        // Dynamically generate a timestamp
        CURRENT_TIMESTAMP = new Date().format('yyyy-MM-dd-HH-mm-ss', TimeZone.getTimeZone('UTC'))
        // Frontend
        frontend_docker_image_name = "dolvladzio/frontend-${CURRENT_TIMESTAMP}"
        frontend_dockerfile_source = "HW_03/project/frontend/"
        // Backend
        backend_docker_image_name = "dolvladzio/backend-${CURRENT_TIMESTAMP}"
        backend_dockerfile_source = "HW_03/project/"
        backend_service_name      = "backend"
        // Docker
        docker_cred_id            = "6e8a09a8-0e72-47d4-80b6-efff31fa972d" // id of the cred
    }

    stages {
        // stage('Test') {
        //     steps {
        //         script {
        //             // The backend's sonarqube testing
        //             dir("${backend_dockerfile_source}") {
        //                 echo "- Testing: ${backend_service_name}"
        //                 sh "gradle sonar"
        //                 echo "- ${serviceName} was tested successfully via SonarQube"
        //             }
        //         }
        //     }
        // }
        stage('Build') {
            steps {
                script {
                    // The frontend's image building
                    buildImageStage(frontend_docker_image_name, frontend_dockerfile_source)
	                // The backend's image building
                    buildImageStage(backend_docker_image_name, backend_dockerfile_source)
                }
            }
        }
        stage('Logging') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: "$docker_cred_id", 
                                                    usernameVariable: 'DOCKER_USERNAME', 
                                                    passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh """
                        echo "Logging into DockerHub"
                        echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
                        """
                    }
                }
            }
        }
        stage('Deploy') {
            steps {
                script {
                    // Deploying the frontend's image to the dockerhub
                    pushImage(frontend_docker_image_name, frontend_dockerfile_source)
	                // Deploying the backend's image to the dockerhub
                    pushImage(backend_docker_image_name, backend_dockerfile_source)
                }
            }
        }
        stage('Cleanup') {
            steps {
                sh """
                echo "- Cleaning up unused Docker images and volumes"
                docker image prune -a -f
                docker system prune --volumes -f
                """
            }
        }
    }

    post {
        always {
            echo "- Pipeline comleted!"
        }
        success {
            echo '- Pipeline passed successfully!'
        }
        failure {
            echo '- Pipeline failed! Check the logs for errors.'
        }
    }
}
// A function to build images
def buildImageStage(String dockerImageName, String dockerfileSource) {
    stage("- Building the image: ${dockerImageName}") {
        dir("${dockerfileSource}") {
            sh "docker build -t ${dockerImageName} ."
            echo "- The docker image: ${dockerImageName} was built successfully"
        }
    }
}
// A function to build images
def pushImage(String dockerImageName, String dockerfileSource) {
    stage("- Pushing the image: ${dockerImageName}") {
        dir("${dockerfileSource}") {
            sh "docker push ${dockerImageName}"
            echo "- The docker image: ${dockerImageName} was pushed successfully to the DockerHub"
        }
    }
}
